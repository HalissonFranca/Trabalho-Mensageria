Oque foi feito ate agora?

Vamos revisar as funcionalidades aplicadas em cada parte do seu código e como elas se interagem na sua aplicação de gerenciamento de notificações usando Kafka.

 1. **KafkaConsumerService**
- **Funcionalidade**: Este serviço consome mensagens do tópico Kafka "notificacoes".
- **Anotação `@KafkaListener`**: Escuta as mensagens enviadas para o tópico especificado e processa cada notificação recebida.
- **Método `consume(Notification notification)`**: Recebe a notificação e imprime no console.

2. **KafkaProducerService**
- **Funcionalidade**: Este serviço é responsável por enviar mensagens para o tópico Kafka.
- **Injeção de Dependência**: Usa `KafkaTemplate` para enviar notificações.
- **Método `sendMessage(Notification notification)`**: Envia a notificação para o tópico "notificacoes".

 3. **Classe Notification**
- **Funcionalidade**: Modelo de dados que representa uma notificação.
- **Atributos**: Contém informações sobre o tipo de notificação, mensagem e prioridade.
- **Implementação de `Serializable`**: Permite que os objetos da classe sejam convertidos em um formato que pode ser facilmente transmitido pela rede ou armazenado.

 4. **SalveAdminisstrador (Interface Gráfica)**
- **Funcionalidade**: Interface gráfica que permite ao usuário enviar notificações.
- **Componentes**:
  - `JComboBox`: Para selecionar o tipo de notificação.
  - `JTextArea`: Para digitar a mensagem da notificação.
  - `JRadioButton`: Para escolher a prioridade da notificação (Alta, Média, Baixa).
  - `JButton`: Para enviar a notificação.
- **Lógica**: Após o usuário selecionar uma opção e definir a prioridade, a mensagem é criada e enviada ao serviço Kafka para processamento.

 5. **Configurações do Kafka**
- **Configuração do Kafka no `application.properties`**: Define as propriedades necessárias para que a aplicação interaja com o broker Kafka, como o endereço do servidor, grupo do consumidor e deserializadores.
- **Deserialização**: Configuração de deserializadores para garantir que as mensagens sejam corretamente interpretadas ao serem recebidas pelo consumidor.

 6. **Pom.xml**
- **Dependências**: Inclui bibliotecas necessárias para o funcionamento do Spring Boot, Spring Kafka e para testes.
- **Plugins de construção**: Configuração do Maven para construir a aplicação, incluindo suporte para recursos UTF-8 e exclusão de dependências desnecessárias do artefato final.

 Funcionalidade Global
A combinação dessas classes e configurações permite a criação de uma aplicação que:
- Permite que administradores enviem notificações com prioridade a alunos e funcionários.
- Escuta e processa essas notificações em tempo real, utilizando o Kafka como middleware para comunicação assíncrona.
